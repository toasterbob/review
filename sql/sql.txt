TableA        TableB
id name       id  name
-- ----       --  ----
1  Pirate     1   Rutabaga
2  Monkey     2   Pirate
3  Ninja      3   Darth Vader
4  Spaghetti  4   Ninja


Inner join** produces only the set of records that match in both Table A and Table B.

SELECT * FROM TableA
INNER JOIN TableB
ON TableA.name = TableB.name
id  name       id   name

1   Pirate     2    Pirate

3   Ninja      4    Ninja


Full outer join produces the set of all records in Table A and Table B,
with matching records from both sides where available. If there is no
match, the missing side will contain null.

SELECT * FROM TableA
FULL OUTER JOIN TableB
ON TableA.name = TableB.name
id    name       id    name

1     Pirate     2     Pirate

2     Monkey     null  null

3     Ninja      4     Ninja

4     Spaghetti  null  null

null  null       1     Rutabaga

null  null       3     Darth Vader


Left outer join produces a complete set of records from Table A, with
the matching records (where available) in Table B. If there is no match,
the right side will contain null.

SELECT * FROM TableA
LEFT OUTER JOIN TableB
ON TableA.name = TableB.name

id  name       id    name
--  ----       --    ----
1   Pirate     2     Pirate
2   Monkey     null  null
3   Ninja      4     Ninja
4   Spaghetti  null  null


To produce the set of records only in Table A, but not in Table B, we
perform the same left outer join, then exclude the records we don't want
from the right side via a where clause.

SELECT * FROM TableA
LEFT OUTER JOIN TableB
ON TableA.name = TableB.name
WHERE TableB.id IS null
id  name       id     name

2   Monkey     null   null

4   Spaghetti  null   null


To produce the set of records unique to Table A and Table B, we perform
the same full outer join, then **exclude the records we don't want from
both sides via a where clause**.

SELECT * FROM TableA
FULL OUTER JOIN TableB
ON TableA.name = TableB.name
WHERE TableA.id IS null
OR TableB.id IS null
id    name       id    name

2     Monkey     null  null

4     Spaghetti  null  null

null  null       1     Rutabaga

null  null       3     Darth Vader


There's also a cartesian product or cross join
This joins "everything to everything", resulting in 4 x 4 = 16 rows,
far more than we had in the original sets. If you do the math, you can
see why this is a very dangerous join to run against large tables.

SELECT * FROM TableA
CROSS JOIN TableB


Self Join
Employee Table

id	first_name	last_name	manager_id
1	Kush	Patel	NULL
2	Jeff	Fiddler	1
3	Quinn	Leong	2
4	Shamayel	Daoud	2
5	Robert	Koeze	4
6	Munyo	Frey	3
7	Kelly	Chung	4
SELECT
  team_member.first_name, team_member.last_name,
   manager.first_name, manager.last_name
FROM
  employee AS team_member
JOIN
  employee AS manager ON manager.id = team_member.manager_id

  team_member.first_name	team_member.last_name	manager.first_name	manager.last_name
  Jeff	Fiddler	Kush	Patel
  Quinn	Leong	Jeff	Fiddler
  Shamayel	Daoud	Jeff	Fiddler
  Robert	Koeze	Shamayel	Daoud
  Munyo	Frey	Quinn	Leong
  Kelly	Chung	Shamayel	Daoud

 Since we only deal with one table in a self join, we have to use aliases.


Keep in mind, the keyword AS is not necessary to alias tables or columns.
The above SQL query could be rewritten:
 SELECT
  team_member.first_name, team_member.last_name,
   manager.first_name, manager.last_name
FROM
  employee team_member
JOIN
  employee manager ON manager.id = team_member.manager_id



Here's an example of some well formatted SQL code:
SELECT
  table_two.column_one,
  table_two.column_two,
  table_two.column_three
FROM
  table_one
LEFT OUTER JOIN
  table_two ON table_one.column_one = table_two.column_x
WHERE
  (table_one.column_three > table_two.column_y
    AND another_condition IS NULL)
GROUP BY
  table_two.column_four
ORDER BY
  table_two.column_four


Subqueries
SELECT
  bands.*
FROM
  bands
JOIN (
  SELECT
    albums.*
  FROM
    albums
  WHERE
    album.type = "POP"
  GROUP BY
    album.band_id
  HAVING
    COUNT(*) > 3
  ) AS pop_group_albums ON bands.id = pop_group_albums.band_id
WHERE
  band.leader_id IN (
    SELECT
      musicians.id
    FROM
      musicians
    WHERE
      musicians.birth_yr > 1940
  )
